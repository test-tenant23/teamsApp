// Import polyfills for fetch required by msgraph-sdk-javascript.
import "isomorphic-fetch";
import { Context, HttpRequest } from "@azure/functions";
import { Client } from "@microsoft/microsoft-graph-client";
import { AppCredential, AppCredentialAuthConfig, createMicrosoftGraphClientWithCredential } from "@microsoft/teamsfx";
import { readFile } from "fs/promises";
import * as path from "path";
import { parse } from 'csv-parse/sync';
import config from "../config";

interface Response {
  status: number;
  body: { [key: string]: any };
}

const authConfig: AppCredentialAuthConfig = {
  authorityHost: config.authorityHost,
  clientId: config.clientId,
  tenantId: config.tenantId,
  clientSecret: config.clientSecret,
}

type TeamsfxContext = { [key: string]: any };

/**
 * @param {Context} context - The Azure Functions context object.
 * @param {HttpRequest} req - The HTTP request.
 * @param {teamsfxContext} TeamsfxContext - The context generated by teamsfx binding.
 */
export default async function run(
  context: Context,
  req: HttpRequest,
  teamsfxContext: TeamsfxContext
): Promise<Response> {
  context.log("HTTP trigger function processed a request.");

  const connectionId = req.query.connectionId;

  // Initialize response.
  const res: Response = {
    status: 200,
    body: {},
  };

  let appCredential;
  try {
    appCredential = new AppCredential(authConfig);
  } catch (e) {
    context.log.error(e);
    return {
      status: 500,
      body: {
        error:
          "Failed to construct AppCredential with Application Identity. " +
          "Ensure your function app is configured with the right Azure AD App registration.",
      },
    };
  }

  // Ingest data
  try {
    const csvFileContent = (await readFile(path.join(context.executionContext.functionDirectory, "assets", "ApplianceParts.csv"))).toString();
    const records = parse(csvFileContent, {
      columns: true,
      skip_empty_lines: true
    });
    const graphClient: Client = createMicrosoftGraphClientWithCredential(appCredential);
    for (const item of records) {
      await graphClient.api(`/external/connections/${connectionId}/items/${item.PartNumber}`)
        .put({
          "acl": [
            {
              "type": "everyone",
              "value": "c5f19b2d-0a77-454a-9b43-abf298c3b34e",
              "accessType": "grant"
            }
          ],
          "properties": {
            "partNumber": Number(item.PartNumber),
            "name": item.Name,
            "description": item.Description,
            "price": Number(item.Price),
            "inventory": Number(item.Inventory),
            "appliances": item.Appliances.split(";"),
            "appliances@odata.type": "Collection(String)"
          },
          "content": {
            "type": "text",
            "value": item.Description
          }
        });
    }
  } catch (e) {
    context.log.error(e);
    return {
      status: e?.statusCode ?? 500,
      body: {
        error:
          "Failed to ingest items: " + e.toString(),
      },
    };
  }

  return res;
}
